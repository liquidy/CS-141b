Sasha Boulgakov
Annie Chin
Kevin Lo

App Engine app: 2manithreads.appspot.com
Git repository: https://github.com/liquidy/CS-141b

Notes: We decided to use IP addresses for the lockedBy field. As Michael
mentioned in one of the answered questions on Moodle, it is difficult to
create a fully secure application without some sort of login or authentication
feature. However, we believe that using IP addresses provides a reasonable
way of identifying unique users, because it at least takes care of the case
when someone accidentally closes a tab or crashes their computer, and wishes
to reobtain the same document lock before the timeout ends. In this case, using
the IP address check allows that user to obtain the lock for the document
immediately without having to wait the entire timeout (which could be bad if
the timeout were on the scale of hours). It also allows us to do correct checks
for if a lock has expired; to check if a lock is expired, we must look to see
that either: 1) lockedUntil has passed, or 2) someone else (from another IP 
address, at least) has already acquired the lock (implying that the lock 
expired).

One more thing: in saveDocument, after the LockExpired check is carried out 
(line 175), it is possible for the lock to expire right before we persist the
document in the database. While this is technically an issue and could lead to
the document being persisted with a slightly expired lock, it doesn't interfere
with the main purpose of the lock, which is to prevent others from acquiring
the lock if one person already owns it. We can see why this is true by
looking at the transaction between lines 159 and 196, which places a lock on
the database during its execution and ensures that no one else fiddles around 
with the database (e.g. acquires the lock) while we're executing the 
transaction code block. This implies we shouldn't run into any problems with
anyone else grabbing the lock while we're in the process of performing a 
database modification. Therefore, we decided to leave this tiny abnormality
in the code because it makes for more understandable code, as well as a more
robust (in terms of speed) system. If we wanted to fix this abnormality, it
would be a very quick fix (~3 lines) in the code; check if the lock is 
expired after we persist the document, and if it is rollback the transaction.
However, transaction rollbacks tend to be expensive (often, an order
of magnitude more expensive than the transaction itself), and we felt a 
massively concurrent system should aim to have as few rollbacks as possible,
as long as it doesn't interfere with functionality. Therefore, we left this
additional check out. Note the current behavior should not break anything 
(specifically, if process A has a lock strictly after process B, then we 
will never have process A write to the document before process B writes).
